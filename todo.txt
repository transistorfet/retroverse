
* update the cover picture on jabberwocky.ca
* update the pictures of k30p with ones after the FTDI rework


* change the license

* add damping resistors to the clock lines

* figure out why it doesn't boot correctly when first powered on.  Maybe the CPLD needs a special reset line, or it needs to be
  programmed to reset more than it does, or it needs to hold the reset low or something.  If it can't be solved in logic, I'll need
  to find a hardware solution

* add support for interrupts on the VME bus, which will require those extra address pins you connected
* add the unmapped address thing which should cause a bus error on unmapped
* make a simple peripheral with bigboy, possibly even a dummy ATA device to help with driver writing

* commit changes to CF Card and put it on github
* design a frontpanel for the CF Card, or else you could try cutting one, but I don't expect it to be easy or pretty if I do (do I
  need to build my own CNC machine?)


* make an extension board for membird that extend it to 160mm without needing the connectors that the riser board has
  It could have a power switch so the board under test can be cycled without cycling the system, and add headers near the front so
  you can connect a logic analyzer without needing to open the back of the case
* make an extension board that goes on the other end of the board, unlike the one with the two connectors, which cost more.  Just
  make one that somehow bolts to the existing 100mm card's frontpanel holes, and then has its own frontpanel bracket holes for the
  actual bracket and frontpanel

* test one of the real VME cards to see if it has the BERR blip too when AS is asserted too fast (I think it does)
* can you somehow fix the glitch on membird woodcock with berr being asserted.  Is the actual fix to delay the assertion of AS on
  the CPU card, since it's supposed to be 35ns delay, which would be more than enough to avoid this race condition

* add support for the A40 cycle to CPU card
* turn bigboy into an ethernet card

* figure out how you want to fix the upper addressing issue with the CPLD



* write a post about something

* design sdram card with ice40 fpga, printed in yellow?  called MemBird - Raven?  Something else if it's not black solder mask?
* design a board that uses a raspi compute module?  so basically the VME interface?
* make a breakout board, which you can design now and use with the components on order, to connect a logic analyzer


* if you put a right angle toggle switch for power on the front of the board (I guess bottom frontpanel would be easiest), then you
  could power off the board when it's in the slot, and pull it out without powering off the whole backplane.  It's probably only
  useful for CPU cards and might be more hassle in routing than it's worth, but would be a nice feature
* could add a microcontroller that monitors power and halt and resets the CPU after a period if it's locked up, and possibly other
  functions.  It might not be easy to make it accessible to the CPU on the controller card, but it could possibly be hooked up to
  the serial bus and communicate with other peripherals


BigBoy:

    * add ADC voltage monitor to big boy or a bus arbiter board to give a failure signal if the voltage is not within range I've had
      issues in testing where the voltage sagged due to the wire I was using, which could have been low enough to damage a sensitive
      board, so best if I had a signal for that
    * for future revisions, add a voltage and current monitoring circuit (at least current that bigboy is using)
    * should you replace the microUSB with USB-C?  I probably have a bunch of existing microUSB-B connectors, since I used that on fidget...
    * add detection for the extra bus pins on the 4th row.  If there's no power or something present, then assume it's not connected and
      the onboard logic can only do multiplexed operations

68k DIP Board:

    * for a future 68k cpu card, use a gpio from the serial controller to swap ram and flash, so it can be used for ProcessorTests validation

